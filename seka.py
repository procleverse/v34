import logging
import random
import re
import requests
from datetime import datetime, timedelta
import aiosqlite
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    JobQueue
)
from typing import Dict, List, Tuple, Optional
from enum import Enum, auto

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7150323529:AAH5eVyWGZeANIHK58pH6aVuZpOedLtFD4A"
DATABASE_PATH = "database.db"
ADMIN_IDS = [7765875067, 5042988950]
MAX_PLAYERS = 6
MIN_BET = 50
MAX_BET = 10000
DEFAULT_BALANCE = 0
DEALER_FEE_PERCENT = 20  # 20% –∫–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä—É
FAST_MODE_BET = 100  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
MIN_WITHDRAW = 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞

db_connection: Optional[aiosqlite.Connection] = None

# Crypto Bot configuration
CRYPTO_BOT_API_KEY = "362437:AA54iCl9i8kGn1YGtWhsIAIZEpDCeOpOYYu"
CRYPTO_BOT_USERNAME = "SekaPlaybot"
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api/"

EMOJI = {
    'hearts': '‚ô•Ô∏è',
    'diamonds': '‚ô¶Ô∏è',
    'clubs': '‚ô£Ô∏è',
    'spades': '‚ô†Ô∏è',
    'money': 'üí∞',
    'cards': 'üÉè',
    'trophy': 'üèÜ',
    'fire': 'üî•',
    'skull': 'üíÄ',
    'clock': '‚è≥',
    'check': '‚úÖ',
    'cross': '‚ùå',
    'home': 'üè†',
    'profile': 'üë§',
    'balance': 'üí∞',
    'top': 'üèÜ',
    'info': '‚ÑπÔ∏è',
    'add': '‚ûï',
    'deposit': 'üì•',
    'withdraw': 'üì§',
    'help': '‚ùì',
    'game': 'üéÆ',
    'dice': 'üé≤',
    'warning': '‚ö†Ô∏è',
    'bank': 'üè¶',
    'sword': '‚öîÔ∏è',
    'handshake': 'ü§ù'
}

async def get_exchange_rate(from_currency: str, to_currency: str) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –∑–∞ 1 RUB (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç), –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å.
    RUB -> USDT: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ USDT –∑–∞ 1 RUB (–ø—Ä–∏–º–µ—Ä: 0.011)
    """
    if from_currency == "RUB" and to_currency == "USDT":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å RUB –∫ USDT —á–µ—Ä–µ–∑ Binance API (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
            response = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=USDTRUB", timeout=10)
            data = response.json()
            price = float(data["price"])  # RUB –∑–∞ 1 USDT
            return 1 / price  # USDT –∑–∞ 1 RUB
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ RUB/USDT: %s", e)
            return 1 / 90.0  # fallback
    elif from_currency == "USDT" and to_currency == "RUB":
        try:
            response = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=USDTRUB", timeout=10)
            data = response.json()
            price = float(data["price"])
            return price  # RUB –∑–∞ 1 USDT
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT/RUB: %s", e)
            return 90.0
    return 1.0

class GameState(Enum):
    WAITING = auto()
    JOINING = auto()
    BIDDING = auto()
    AWAITING_CONFIRMATION = auto()
    FINAL_CHOICE = auto()
    FINAL_SWARA_WAIT = auto()
    SHOWDOWN = auto()
    FINISHED = auto()

class GameMode(Enum):
    NORMAL = auto()
    FAST = auto()
    TOURNAMENT = auto()

class PlayerAction(Enum):
    FOLD = auto()
    RAISE = auto()
    CALL = auto()
    CHECK = auto()
    SHOW = auto()
    LOOK = auto()
    SWARA = auto()

class Card:
    def __init__(self, rank: str, suit: str):
        self.rank = rank
        self.suit = suit
        self.value = self._calculate_value()
    
    def _calculate_value(self) -> int:
        rank_values = {
            '6': 6, '7': 7, '8': 8, '9': 9,
            '10': 10, 'J': 10, 'Q': 10, 'K': 10,
            'A': 11
        }
        return rank_values.get(self.rank, 0)
    
    def __str__(self) -> str:
        if self.rank == '7' and self.suit == 'clubs':  # Joker
            return "JOK"
        suit_emoji = EMOJI.get(self.suit, self.suit)
        return f"{self.rank}{suit_emoji}"
    
    def __repr__(self) -> str:
        return self.__str__()
    
    def __eq__(self, other):
        return self.rank == other.rank and self.suit == other.suit

class SekaGame:
    def __init__(self, chat_id: int, creator_id: int, bet_amount: int, game_mode: GameMode = GameMode.NORMAL):
        self.chat_id = chat_id
        self.creator_id = creator_id
        self.bet_amount = bet_amount
        self.players: Dict[int, dict] = {}
        self.state = GameState.WAITING
        self.current_player = None
        self.deck: List[Card] = []
        self.pot = 0
        self.max_bid = 0
        self.last_raiser = None
        self.game_mode = game_mode
        self.initialize_deck()
        self.show_confirmations = set()
        self.initial_player_count = 0
        self.final_split_set = set()
        self.final_swara_set = set()
        self.start_time = datetime.now()
        self.timeout_job = None
        self.swara_participants = set()
        self.swara_cost = 0
        self.swara_message_id = None
        self.final_choice_set = set()

    def initialize_deck(self) -> None:
        suits = ['hearts', 'diamonds', 'clubs', 'spades']
        ranks = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        self.deck = [Card(rank, suit) for suit in suits for rank in ranks]
    
    def shuffle_deck(self) -> None:
        random.shuffle(self.deck)
    
    async def add_player(self, user_id: int, user_name: str) -> bool:
        if user_id in self.players:
            return False
            
        if len(self.players) >= MAX_PLAYERS:
            return False
            
        balance = await self.get_user_balance(user_id)
        if balance < self.bet_amount:
            return False
            
        self.players[user_id] = {
            'name': user_name,
            'cards': [],
            'balance': balance,
            'mode': GameMode.NORMAL,
            'bid': 0,
            'folded': False,
            'shown': False,
            'message_id': None,
            'joined_time': datetime.now()
        }
        return True
    
    async def start_game(self) -> bool:
        if len(self.players) < 2:
            return False
            
        for user_id in self.players:
            balance = await self.get_user_balance(user_id)
            if balance < self.bet_amount:
                return False
            self.players[user_id]['balance'] = balance
            
        for user_id in self.players:
            await self.update_user_balance(user_id, -self.bet_amount, "game_bet")
            self.players[user_id]['balance'] -= self.bet_amount
            
        self.shuffle_deck()
        self.deal_cards()
        
        if self.game_mode == GameMode.FAST:
            self.state = GameState.SHOWDOWN
        else:
            self.state = GameState.BIDDING
            self.current_player = next(iter(self.players))
            
        self.pot = len(self.players) * self.bet_amount
        self.max_bid = self.bet_amount
        
        for player in self.players.values():
            player['bid'] = self.bet_amount
            
        self.initial_player_count = len(self.players)
        return True

    def deal_cards(self) -> None:
        cards_per_player = 3
        for player in self.players.values():
            if not player.get('folded', False):
                player['cards'] = [self.deck.pop() for _ in range(cards_per_player)]
    
    def calculate_hand_value(self, cards: List[Card]) -> int:
        if all(card.rank == '6' for card in cards):
            return 34
            
        joker_present = any(str(card) == "JOK" for card in cards)
        non_joker = [card for card in cards if str(card) != "JOK"]
        
        if joker_present and len(non_joker) == 2 and all(card.rank == '6' for card in non_joker):
            return 34
            
        ace_count = sum(1 for card in cards if card.rank == 'A')
        if ace_count >= 2:
            return 22
            
        if len(set(card.rank for card in cards)) == 1:
            return sum(card.value for card in cards)
            
        suit_totals = {}
        for card in cards:
            if str(card) == "JOK":  # Joker adds to the highest suit
                continue
            card_val = card.value
            suit_totals[card.suit] = suit_totals.get(card.suit, 0) + card_val
        
        # Add joker to the highest suit if present
        if joker_present:
            if suit_totals:
                max_suit = max(suit_totals, key=suit_totals.get)
                suit_totals[max_suit] += 11  # Joker value is 11
            else:
                # If only joker is present (shouldn't happen with 3 cards)
                return 11
        
        return max(suit_totals.values()) if suit_totals else 0

    async def determine_winner(self, context: ContextTypes.DEFAULT_TYPE) -> Dict[int, int]:
        if self.state != GameState.SHOWDOWN:
            return {}
            
        active_players = {pid: p for pid, p in self.players.items() if not p['folded']}
        player_scores = {pid: self.calculate_hand_value(p['cards']) for pid, p in active_players.items()}
        max_score = max(player_scores.values(), default=0)
        winners = [pid for pid, score in player_scores.items() if score == max_score]
        
        if len(winners) > 1:
            # –ù–∏—á—å—è - –¥–µ–ª–∏–º –±–∞–Ω–∫ –º–µ–∂–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
            win_amount = self.pot // len(winners)
            dealer_fee = int(win_amount * DEALER_FEE_PERCENT / 100)
            player_win_amount = win_amount - dealer_fee
            
            # –ó–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –≤—Å–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
            for winner in winners:
                await self.update_user_balance(winner, player_win_amount, "game_win")
                self.players[winner]['balance'] += player_win_amount
            
            # –ó–∞—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–∏–ª–µ—Ä—É (–±–æ—Ç—É)
            total_dealer_fee = dealer_fee * len(winners)
            await self.update_user_balance(0, total_dealer_fee, "dealer_fee")
            
            # Show all players' cards
            cards_text = []
            for pid, p in self.players.items():
                hand_value = self.calculate_hand_value(p['cards'])
                cards_text.append(f"üÉè {p['name']}: {' '.join(str(c) for c in p['cards'])} (—Å–∏–ª–∞: {hand_value})")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏–≥—Ä—ã
            winners_names = ", ".join(self.players[pid]['name'] for pid in winners)
            await context.bot.send_message(
                chat_id=self.chat_id,
                text=(f"ü§ù –ù–∏—á—å—è! {winners_names} –¥–µ–ª—è—Ç –±–∞–Ω–∫ –∏ –ø–æ–ª—É—á–∞—é—Ç –ø–æ {player_win_amount} {EMOJI['money']}!\n"
                      f"üè¶ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {total_dealer_fee} {EMOJI['money']}\n\n" +
                      "–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(cards_text) +
                      "\n\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ /begin –∏–ª–∏ /fast")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            for pid, player in self.players.items():
                try:
                    if pid in winners:
                        message = (
                            f"ü§ù –í—ã —Ä–∞–∑–¥–µ–ª–∏–ª–∏ –±–∞–Ω–∫ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {player_win_amount} {EMOJI['money']}!\n"
                            f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {dealer_fee} {EMOJI['money']}\n\n"
                            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.get_player_cards(pid)}\n"
                            f"–°–∏–ª–∞ —Ä—É–∫–∏: {self.calculate_hand_value(player['cards'])}\n\n"
                            f"üíµ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å."
                        )
                    else:
                        message = (
                            f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.\n\n"
                            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.get_player_cards(pid)}\n"
                            f"–°–∏–ª–∞ —Ä—É–∫–∏: {self.calculate_hand_value(player['cards'])}\n\n"
                            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winners_names} —Å —Å–∏–ª–æ–π —Ä—É–∫–∏ {max_score}\n"
                            f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å—Ç–∞–≤–∫—É: {self.bet_amount} {EMOJI['money']}"
                        )
                    
                    await context.bot.send_message(
                        chat_id=pid,
                        text=message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {pid}: {e}")
            
            self.state = GameState.FINISHED
            
            # Record game results
            for pid in self.players:
                result = 'win' if pid in winners else 'lose'
                profit = player_win_amount if pid in winners else -self.bet_amount
                await db_connection.execute(
                    'INSERT INTO game_history (user_id, game_id, bet_amount, result, profit) VALUES (?, ?, ?, ?, ?)',
                    (pid, self.chat_id, self.bet_amount, result, profit)
                )
            await db_connection.commit()
            
            # Remove game from active games
            if self.chat_id in active_games:
                del active_games[self.chat_id]
            
            return {winner: player_win_amount for winner in winners}
            
        win_amount = self.pot
        winner = winners[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–∏–ª–µ—Ä–∞ (20%)
        dealer_fee = int(win_amount * DEALER_FEE_PERCENT / 100)
        player_win_amount = win_amount - dealer_fee
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –∏–≥—Ä–æ–∫—É –∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        await self.update_user_balance(winner, player_win_amount, "game_win")
        self.players[winner]['balance'] += player_win_amount
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –¥–∏–ª–µ—Ä—É (–±–æ—Ç—É)
        await self.update_user_balance(0, dealer_fee, "dealer_fee")
        
        # Show all players' cards
        cards_text = []
        for pid, p in self.players.items():
            hand_value = self.calculate_hand_value(p['cards'])
            cards_text.append(f"üÉè {p['name']}: {' '.join(str(c) for c in p['cards'])} (—Å–∏–ª–∞: {hand_value})")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏–≥—Ä—ã
        await context.bot.send_message(
            chat_id=self.chat_id,
            text=(f"üéâ {self.players[winner]['name']} –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç {player_win_amount} {EMOJI['money']}!\n"
                  f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {dealer_fee} {EMOJI['money']}\n\n" +
                  "–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(cards_text) +
                  "\n\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ /begin –∏–ª–∏ /fast")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for pid, player in self.players.items():
            try:
                if pid == winner:
                    message = (
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {player_win_amount} {EMOJI['money']}!\n"
                        f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {dealer_fee} {EMOJI['money']}\n\n"
                        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.get_player_cards(pid)}\n"
                        f"–°–∏–ª–∞ —Ä—É–∫–∏: {self.calculate_hand_value(player['cards'])}\n\n"
                        f"üèÜ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å."
                    )
                else:
                    message = (
                        f"üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.\n\n"
                        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.get_player_cards(pid)}\n"
                        f"–°–∏–ª–∞ —Ä—É–∫–∏: {self.calculate_hand_value(player['cards'])}\n\n"
                        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {self.players[winner]['name']} —Å —Å–∏–ª–æ–π —Ä—É–∫–∏ {max_score}\n"
                        f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å—Ç–∞–≤–∫—É: {self.bet_amount} {EMOJI['money']}"
                    )
                
                await context.bot.send_message(
                    chat_id=pid,
                    text=message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {pid}: {e}")
        
        self.state = GameState.FINISHED
        
        # Record game results
        for pid in self.players:
            result = 'win' if pid in winners else 'lose'
            profit = player_win_amount if pid in winners else -self.bet_amount
            await db_connection.execute(
                'INSERT INTO game_history (user_id, game_id, bet_amount, result, profit) VALUES (?, ?, ?, ?, ?)',
                (pid, self.chat_id, self.bet_amount, result, profit)
            )
        await db_connection.commit()
        
        # Remove game from active games
        if self.chat_id in active_games:
            del active_games[self.chat_id]
        
        return {winner: player_win_amount}

    async def player_action(self, player_id: int, action: PlayerAction, amount: int = 0, context: Optional[ContextTypes.DEFAULT_TYPE] = None) -> Tuple[bool, str]:
        if player_id not in self.players or player_id != self.current_player:
            return False, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!"
            
        player = self.players[player_id]
        
        if action == PlayerAction.FOLD:
            player['folded'] = True
            player['shown'] = True
            message = f"{player['name']} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã {EMOJI['skull']}"
            
            # Check if we need to show final choice (when 2 players left from 3+)
            active_players = [pid for pid, p in self.players.items() if not p['folded']]
            if len(active_players) == 2 and self.initial_player_count >= 3:
                await self.show_final_choice(context)
            else:
                await self.next_player(context)
                
            return True, message
            
        elif action == PlayerAction.RAISE:
            if amount <= self.max_bid:
                return False, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π!"
                
            if amount > player['balance'] + player['bid']:
                return False, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"
                
            min_raise = max(int(self.max_bid * 0.1), 10)
            if amount - self.max_bid < min_raise:
                return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ: {self.max_bid + min_raise} {EMOJI['money']}"
                
            amount_to_deduct = amount - player['bid']
            await self.update_user_balance(player_id, -amount_to_deduct, "game_raise")
            player['balance'] -= amount_to_deduct
            player['bid'] = amount
            self.pot += amount_to_deduct
            self.max_bid = amount
            self.last_raiser = player_id
            message = f"{player['name']} –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–æ {amount}{EMOJI['money']} {EMOJI['fire']}"
            await self.next_player(context)
            return True, message
            
        elif action == PlayerAction.CALL:
            if self.max_bid == 0:
                return False, "–ù–µ–ª—å–∑—è –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω—É–ª–µ–≤—É—é —Å—Ç–∞–≤–∫—É!"
            if player['bid'] == self.max_bid:
                return False, "–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç—É —Å—Ç–∞–≤–∫—É!"
                
            diff = self.max_bid - player['bid']
            if diff > player['balance']:
                player['folded'] = True
                player['shown'] = True
                message = f"{player['name']} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤—ã–±—ã–≤–∞–µ—Ç {EMOJI['skull']}"
                
                # Check if we need to show final choice (when 2 players left from 3+)
                active_players = [pid for pid, p in self.players.items() if not p['folded']]
                if len(active_players) == 2 and self.initial_player_count >= 3:
                    await self.show_final_choice(context)
                else:
                    await self.next_player(context)
            else:
                await self.update_user_balance(player_id, -diff, "game_call")
                player['balance'] -= diff
                self.pot += diff
                player['bid'] = self.max_bid
                message = f"{player['name']} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É {EMOJI['check']}"
                await self.next_player(context)
            return True, message
            
        elif action == PlayerAction.CHECK:
            if self.max_bid != 0 and player['bid'] < self.max_bid:
                return False, "–ù–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–µ!"
            message = f"{player['name']} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥ {EMOJI['clock']}"
            await self.next_player(context)
            return True, message
            
        elif action == PlayerAction.SHOW:
            if not self.last_raiser:
                return False, "–ù–µ–ª—å–∑—è –≤—Å–∫—Ä—ã—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –∫—Ä—É–≥–µ —Ç–æ—Ä–≥–æ–≤!"
            if player['bid'] != self.max_bid:
                return False, "–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø–µ—Ä–µ–¥ –≤—Å–∫—Ä—ã—Ç–∏–µ–º!"
                
            player['shown'] = True
            self.last_raiser = None
            self.state = GameState.AWAITING_CONFIRMATION
            self.show_confirmations = {player_id}
            message = f"{player['name']} —Ç—Ä–µ–±—É–µ—Ç –≤—Å–∫—Ä—ã—Ç–∏—è! –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            return True, message
            
        elif action == PlayerAction.LOOK:
            return False, "–†–µ–∂–∏–º –∏–≥—Ä—ã –≤—Å–ª–µ–ø—É—é –æ—Ç–∫–ª—é—á–µ–Ω"
            
        elif action == PlayerAction.SWARA:
            active_players = [pid for pid, p in self.players.items() if not p['folded']]
            if len(active_players) < 2:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–≤–∞—Ä—ã."
                
            idx = active_players.index(player_id)
            right_idx = (idx + 1) % len(active_players)
            opponent_id = active_players[right_idx]
            opponent = self.players[opponent_id]
            
            challenger_score = self.calculate_hand_value(player['cards'])
            opponent_score = self.calculate_hand_value(opponent['cards'])
            
            if challenger_score > opponent_score:
                opponent['folded'] = True
                message = (f"{player['name']} –≤—ã–∏–≥—Ä–∞–ª —Å–≤–∞—Ä—É –ø—Ä–æ—Ç–∏–≤ {opponent['name']} "
                           f"(–µ–≥–æ {challenger_score} > {opponent_score}) –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–µ.")
                
                # Check if only one player left after swara
                active_players = [pid for pid, p in self.players.items() if not p['folded']]
                if len(active_players) == 1:
                    self.state = GameState.SHOWDOWN
                    await self.determine_winner(context)
                else:
                    await self.next_player(context)
            else:
                player['folded'] = True
                message = (f"{player['name']} –ø—Ä–æ–∏–≥—Ä–∞–ª —Å–≤–∞—Ä—É –ø—Ä–æ—Ç–∏–≤ {opponent['name']} "
                           f"(–µ–≥–æ {challenger_score} <= {opponent_score}) –∏ –≤—ã–±—ã–≤–∞–µ—Ç.")
                
                # Check if only one player left after swara
                active_players = [pid for pid, p in self.players.items() if not p['folded']]
                if len(active_players) == 1:
                    self.state = GameState.SHOWDOWN
                    await self.determine_winner(context)
                else:
                    await self.next_player(context)
            return True, message
                
        return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    
    async def show_final_choice(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show options when 2 players left from 3+ initial players"""
        active_players = [pid for pid, p in self.players.items() if not p['folded']]
        if len(active_players) != 2 or self.initial_player_count < 3:
            return
            
        self.state = GameState.FINAL_CHOICE
        self.final_choice_set = set()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç)
        for pid in active_players:
            try:
                await send_player_interface(context, pid, self)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫—É {pid}: {e}")
    
    async def handle_final_choice(self, player_id: int, choice: str, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle player's choice in final 2 players situation"""
        if self.state != GameState.FINAL_CHOICE or player_id not in self.players:
            return
            
        active_players = [pid for pid, p in self.players.items() if not p['folded']]
        if len(active_players) != 2:
            return
            
        self.final_choice_set.add(player_id)
        
        if choice == "final_swara":
            self.final_swara_set.add(player_id)
            await context.bot.send_message(
                chat_id=self.chat_id,
                text=f"{self.players[player_id]['name']} –≤—ã–±—Ä–∞–ª —Å–≤–∞—Ä—É ‚öîÔ∏è"
            )
        elif choice == "final_split":
            self.final_split_set.add(player_id)
            await context.bot.send_message(
                chat_id=self.chat_id,
                text=f"{self.players[player_id]['name']} –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª –±–∞–Ω–∫–∞ ü§ù"
            )
            # If both players chose to split, immediately split the pot
            if len(self.final_split_set) == 2:
                await self.split_pot(context)
                return
        elif choice == "final_continue":
            await context.bot.send_message(
                chat_id=self.chat_id,
                text=f"{self.players[player_id]['name']} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã üîÑ"
            )
            
        # If both players made a choice
        if len(self.final_choice_set) == 2:
            # Try to delete the original message
            try:
                if self.swara_message_id:
                    await context.bot.delete_message(
                        chat_id=self.chat_id,
                        message_id=self.swara_message_id
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # If at least one player chose swara, start swara recruitment
            if len(self.final_swara_set) >= 1:
                await self.start_swara_recruitment(context)
            # If both chose split, split the pot (already handled above)
            elif len(self.final_split_set) == 2:
                pass  # Already handled
            # Otherwise continue game with just these 2 players
            else:
                self.state = GameState.BIDDING
                self.current_player = active_players[0]
                await context.bot.send_message(
                    chat_id=self.chat_id,
                    text="üîÑ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –º–µ–∂–¥—É –¥–≤—É–º—è –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∏–≥—Ä–æ–∫–∞–º–∏!"
                )
                
                for pid in active_players:
                    try:
                        await send_player_interface(context, pid, self)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫—É {pid}: {e}")
    
    async def start_swara_recruitment(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Start swara recruitment phase"""
        self.state = GameState.FINAL_SWARA_WAIT
        self.swara_participants = set(pid for pid, p in self.players.items() if not p['folded'])
        self.swara_cost = self.pot // 2  # 50% of current pot
        
        await context.bot.send_message(
            chat_id=self.chat_id,
            text=(
                f"‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä –≤ —Å–≤–∞—Ä—É!\n\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {self.swara_cost} {EMOJI['money']} (50% –æ—Ç –±–∞–Ω–∫–∞)\n"
                f"üë• –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {len(self.swara_participants)}/{MAX_PLAYERS}\n"
                f"‚è≥ –ù–∞–±–æ—Ä –ø—Ä–æ–¥–ª–∏—Ç—Å—è 60 —Å–µ–∫—É–Ω–¥\n\n"
                f"–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    f"‚öîÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ({self.swara_cost} {EMOJI['money']})", 
                    callback_data="join_swara"
                )]
            ])
        )
        
        # Set timeout for swara recruitment
        self.timeout_job = context.job_queue.run_once(
            self.start_swara_round,
            60,
            chat_id=self.chat_id,
            name=f"start_swara_{self.chat_id}"
        )
    
    async def start_swara_round(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Start the actual swara round with all participants"""
        if len(self.swara_participants) < 2:
            await context.bot.send_message(
                chat_id=self.chat_id,
                text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–≤–∞—Ä—ã. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ."
            )
            self.state = GameState.BIDDING
            active_players = [pid for pid, p in self.players.items() if not p['folded']]
            self.current_player = active_players[0] if active_players else None
            return
            
        # Collect fees from all participants
        for pid in self.swara_participants:
            if pid not in self.players:
                continue
                
            player = self.players[pid]
            if await self.update_user_balance(pid, -self.swara_cost, "swara_fee"):
                player['balance'] -= self.swara_cost
                self.pot += self.swara_cost
    
        # Reset game state for swara round with proper variable usage
        for pid, player in self.players.items():
            player['folded'] = (pid not in self.swara_participants)
            player['shown'] = False
            player['bid'] = 0
    
        self.shuffle_deck()
        self.deal_cards()
        self.state = GameState.BIDDING
        self.current_player = next(iter(self.swara_participants))
        self.max_bid = 0
        self.last_raiser = None
        
        participants_names = ", ".join(self.players[pid]['name'] for pid in self.swara_participants)
        await context.bot.send_message(
            chat_id=self.chat_id,
            text=(
                f"‚öîÔ∏è –°–≤–∞—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants_names}\n"
                f"üí∞ –ë–∞–Ω–∫: {self.pot} {EMOJI['money']}\n"
                f"üé¥ –†–∞–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã\n\n"
                f"üîÑ –ü–µ—Ä–≤—ã–π —Ö–æ–¥: {self.players[self.current_player]['name']}"
            )
        )
        
        for pid in self.swara_participants:
            try:
                await send_player_interface(context, pid, self)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫—É {pid}: {e}")

    async def handle_swara_join(self, query, user_id, context: ContextTypes.DEFAULT_TYPE):
        """Handle player joining swara"""
        if self.state != GameState.FINAL_SWARA_WAIT:
            return
            
        if user_id in self.swara_participants:
            await query.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–≤–∞—Ä–µ", show_alert=True)
            return
            
        # Check balance
        player_balance = await self.get_user_balance(user_id)
        if player_balance < self.swara_cost:
            await query.answer(
                f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {self.swara_cost} {EMOJI['money']}", 
                show_alert=True
            )
            return
            
        # Add new player if not already in game
        if user_id not in self.players:
            if len(self.players) >= MAX_PLAYERS:
                await query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤", show_alert=True)
                return
                
            if not await self.add_player(user_id, query.from_user.full_name):
                await query.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–≥—Ä—É", show_alert=True)
                return
    
        # Add to swara participants
        self.swara_participants.add(user_id)
        
        await context.bot.send_message(
            chat_id=self.chat_id,
            text=f"‚öîÔ∏è {self.players[user_id]['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–∞—Ä–µ –∑–∞ {self.swara_cost} {EMOJI['money']}!"
        )
        
        # Update player interface
        await send_player_interface(context, user_id, self)
        
        # Check if we reached max players
        if len(self.swara_participants) >= MAX_PLAYERS:
            if self.timeout_job:
                self.timeout_job.schedule_removal()
            await self.start_swara_round(context)

    async def split_pot(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Split pot between last 2 players"""
        active_players = [pid for pid, p in self.players.items() if not p['folded']]
        if len(active_players) != 2:
            return
            
        player1_id = active_players[0]
        player2_id = active_players[1]
        
        # Calculate amounts with dealer fee
        total = self.pot
        dealer_fee = int(total * DEALER_FEE_PERCENT / 100)
        player_share = (total - dealer_fee) // 2
        
        # Distribute funds
        await self.update_user_balance(player1_id, player_share, "game_split")
        await self.update_user_balance(player2_id, player_share, "game_split")
        await self.update_user_balance(0, dealer_fee, "dealer_fee")
        
        # Show cards
        cards_text = []
        for pid, p in self.players.items():
            hand_value = self.calculate_hand_value(p['cards'])
            cards_text.append(f"üÉè {p['name']}: {' '.join(str(c) for c in p['cards'])} (—Å–∏–ª–∞: {hand_value})")
        
        await context.bot.send_message(
            chat_id=self.chat_id,
            text=(
                f"ü§ù –ò–≥—Ä–æ–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –±–∞–Ω–∫!\n\n"
                f"üèÜ –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç: {player_share} {EMOJI['money']}\n"
                f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {dealer_fee} {EMOJI['money']}\n\n"
                "–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤:\n" + "\n".join(cards_text) +
                "\n\nüîÑ –î–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ /begin –∏–ª–∏ /fast"
            )
        )
        
        # Send private messages
        for pid in self.players:
            try:
                if pid in active_players:
                    message = (
                        f"ü§ù –í—ã —Ä–∞–∑–¥–µ–ª–∏–ª–∏ –±–∞–Ω–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {player_share} {EMOJI['money']}!\n"
                        f"üè¶ –ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: {dealer_fee} {EMOJI['money']}\n\n"
                        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.get_player_cards(pid)}\n"
                        f"–°–∏–ª–∞ —Ä—É–∫–∏: {self.calculate_hand_value(self.players[pid]['cards'])}\n\n"
                        f"üíµ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å."
                    )
                else:
                    message = (
                        f"üò¢ –í—ã –≤—ã–±—ã–ª–∏ –∏–∑ –∏–≥—Ä—ã.\n\n"
                        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.get_player_cards(pid)}\n"
                        f"–°–∏–ª–∞ —Ä—É–∫–∏: {self.calculate_hand_value(self.players[pid]['cards'])}\n\n"
                        f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å—Ç–∞–≤–∫—É: {self.bet_amount} {EMOJI['money']}"
                    )
                
                await context.bot.send_message(chat_id=pid, text=message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {pid}: {e}")
        
        self.state = GameState.FINISHED
        
        # Record game results
        for pid in self.players:
            result = 'win' if pid in active_players else 'lose'
            profit = player_share if pid in active_players else -self.bet_amount
            await db_connection.execute(
                'INSERT INTO game_history (user_id, game_id, bet_amount, result, profit) VALUES (?, ?, ?, ?, ?)',
                (pid, self.chat_id, self.bet_amount, result, profit)
            )
        await db_connection.commit()
        
        # Remove game from active games
        if self.chat_id in active_games:
            del active_games[self.chat_id]
    
    async def next_player(self, context: Optional[ContextTypes.DEFAULT_TYPE] = None) -> None:
        active_players = [pid for pid, p in self.players.items() if not p['folded'] and not p['shown']]
        
        # Check if we have 2 players left from 3+ initial players
        if len(active_players) == 2 and self.initial_player_count >= 3:
            await self.show_final_choice(context)
            return
            
        if len(active_players) <= 1:
            self.state = GameState.SHOWDOWN
            if context:
                await self.determine_winner(context)
            return
            
        current_idx = active_players.index(self.current_player) if self.current_player in active_players else -1
        next_idx = (current_idx + 1) % len(active_players)
        self.current_player = active_players[next_idx]
    
    async def get_user_balance(self, user_id: int) -> int:
        try:
            async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
                row = await cursor.fetchone()
            return row[0] if row else 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0
    
    async def update_user_balance(self, user_id: int, amount: int, transaction_type: str) -> bool:
        try:
            async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
                row = await cursor.fetchone()
                
            if row is None:
                new_balance = amount
                await db_connection.execute('INSERT INTO user_balances (user_id, balance) VALUES (?, ?)', (user_id, new_balance))
            else:
                current_balance = row[0]
                new_balance = current_balance + amount
                await db_connection.execute('UPDATE user_balances SET balance = ? WHERE user_id = ?', (new_balance, user_id))
                
            await db_connection.execute(
                'INSERT INTO transactions (user_id, amount, transaction_type, game_id) VALUES (?, ?, ?, ?)',
                (user_id, amount, transaction_type, self.chat_id)
            )
            await db_connection.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False

    def get_player_cards(self, user_id: int) -> str:
        if user_id in self.players:
            return " ".join(str(card) for card in self.players[user_id]['cards'])
        return ""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games: Dict[int, SekaGame] = {}

async def create_crypto_bot_invoice(user_id: int, amount: float) -> Optional[str]:
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "user_id": user_id,
        "amount": amount,
        "asset": "USDT",
        "description": f"Deposit for user {user_id}",
        "hidden_message": "Thank you for your deposit!",
        "expires_in": 3600
    }
    try:
        response = requests.post(
            f"{CRYPTO_BOT_API_URL}createInvoice",
            headers=headers,
            json=payload,
            timeout=10
        )
        if response.status_code == 200 and response.json().get("ok"):
            return response.json()["result"]["pay_url"]
    except Exception as e:
        logger.error(f"Error creating Crypto Bot invoice: {e}")
    return None

async def process_crypto_bot_withdrawal(user_id: int, amount: float, wallet: str) -> bool:
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "user_id": user_id,
        "asset": "USDT",
        "amount": amount,
        "address": wallet,
        "comment": f"Withdrawal for user {user_id}"
    }
    try:
        response = requests.post(
            f"{CRYPTO_BOT_API_URL}transfer",
            headers=headers,
            json=payload,
            timeout=10
        )
        return response.status_code == 200 and response.json().get("ok", False)
    except Exception as e:
        logger.error(f"Error processing Crypto Bot withdrawal: {e}")
    return False

async def send_player_interface(context: ContextTypes.DEFAULT_TYPE, player_id: int, game: SekaGame) -> None:
    player = game.players[player_id]
    keyboard = []
    
    state_titles = {
        GameState.WAITING: "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤",
        GameState.JOINING: "‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
        GameState.BIDDING: "üí∞ –¢–æ—Ä–≥–∏",
        GameState.AWAITING_CONFIRMATION: "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–∫—Ä—ã—Ç–∏—è",
        GameState.FINAL_CHOICE: "‚ö° –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è",
        GameState.FINAL_SWARA_WAIT: "‚öîÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ —Å–≤–∞—Ä—ã",
        GameState.SHOWDOWN: "üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
        GameState.FINISHED: "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    }
    
    if game.state == GameState.AWAITING_CONFIRMATION:
        confirm_buttons = []
        if player_id not in game.show_confirmations:
            confirm_buttons.append(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_show"))
        else:
            confirm_buttons.append(InlineKeyboardButton("üîÑ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏", callback_data="noop"))
        
        confirm_buttons.append(InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="decline_show"))
        keyboard.append(confirm_buttons)
            
    elif game.state == GameState.FINAL_SWARA_WAIT:
        if player_id not in game.swara_participants:
            keyboard.append([InlineKeyboardButton(
                f"‚öîÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ({game.swara_cost} {EMOJI['money']})", 
                callback_data="join_swara"
            )])
            
    elif game.state == GameState.FINAL_CHOICE:
        active_players = [pid for pid, p in game.players.items() if not p['folded']]
        if player_id in active_players:
            keyboard = [
                [InlineKeyboardButton("‚öîÔ∏è –ù–∞—á–∞—Ç—å —Å–≤–∞—Ä—É", callback_data="final_swara")],
                [InlineKeyboardButton("ü§ù –†–∞–∑–¥–µ–ª–∏—Ç—å –±–∞–Ω–∫", callback_data="final_split")],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É", callback_data="final_continue")]
            ]
            
    elif game.state == GameState.BIDDING and game.current_player == player_id:
        min_raise = max(int(game.max_bid * 0.1), 10)
        possible_raises = [
            game.max_bid + min_raise,
            game.max_bid + min_raise * 2,
            game.max_bid + min_raise * 3
        ]
        
        raise_buttons = []
        for amount in possible_raises:
            if amount <= player['balance'] + player['bid']:
                raise_buttons.append(InlineKeyboardButton(f"üîº +{amount-game.max_bid}", callback_data=f"raise_{amount}"))
        
        if raise_buttons:
            keyboard.append(raise_buttons)
        
        action_buttons = []
        
        if game.max_bid > player['bid']:
            call_amount = game.max_bid - player['bid']
            action_buttons.append(InlineKeyboardButton(
                f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å (+{call_amount})", 
                callback_data="call"
            ))
        else:
            action_buttons.append(InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="check"))
            
        action_buttons.append(InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å", callback_data="fold"))
        
        if game.last_raiser and game.max_bid == player['bid']:
            action_buttons.append(InlineKeyboardButton("üÉè –í—Å–∫—Ä—ã—Ç—å—Å—è", callback_data="show"))
            
        keyboard.append(action_buttons)
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    mode_info = {
        GameMode.NORMAL: "üéÆ –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞",
        GameMode.FAST: "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞",
        GameMode.TOURNAMENT: "üèÜ –¢—É—Ä–Ω–∏—Ä"
    }.get(game.game_mode, "üéÆ –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞")
    
    cards_display = game.get_player_cards(player_id)
    
    text = (
        f"{mode_info}\n"
        f"üè∑ –°—Ç–∞–≤–∫–∞: {game.bet_amount} {EMOJI['money']}\n"
        f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {player['balance']} {EMOJI['money']}\n"
        f"üè¶ –ë–∞–Ω–∫: {game.pot} {EMOJI['money']}\n\n"
        f"üé¥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {cards_display}\n"
    )
    
    if game.state == GameState.FINISHED:
        text += "\nüéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É."
    elif game.state == GameState.AWAITING_CONFIRMATION:
        confirmed = len(game.show_confirmations)
        total = len([p for p in game.players.values() if not p['folded']])
        text += f"\nüîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–∫—Ä—ã—Ç–∏—è: {confirmed}/{total}"
    elif game.state == GameState.FINAL_CHOICE:
        text += "\n‚ö° –û—Å—Ç–∞–ª–æ—Å—å 2 –∏–≥—Ä–æ–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    elif game.state == GameState.FINAL_SWARA_WAIT:
        if player_id in game.swara_participants:
            text += "\n‚öîÔ∏è –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–≤–∞—Ä–µ. –û–∂–∏–¥–∞–Ω–∏–µ..."
        else:
            text += f"\n‚öîÔ∏è –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∑–∞ {game.swara_cost} {EMOJI['money']}"
    elif game.current_player == player_id:
        text += "\nüîÑ –°–µ–π—á–∞—Å –≤–∞—à —Ö–æ–¥!"
    else:
        text += f"\n‚è≥ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: {game.players[game.current_player]['name']}"
    
    if game.state == GameState.BIDDING and game.current_player == player_id:
        text += "\n\n‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
    try:
        if player['message_id']:
            await context.bot.edit_message_text(
                chat_id=player_id,
                message_id=player['message_id'],
                text=text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            msg = await context.bot.send_message(
                chat_id=player_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            player['message_id'] = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫—É {player_id}: {e}")

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    
    game = None
    for g in active_games.values():
        if user_id in g.players:
            game = g
            break
            
    if not game:
        await query.edit_message_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    try:
        if data in ("final_swara", "final_split", "final_continue"):
            await game.handle_final_choice(user_id, data, context)
            return
            
        if data == "join_swara":
            await game.handle_swara_join(query, user_id, context)
            return
            
        if data == "confirm_show":
            await handle_show_confirmation(query, user_id, game, context)
            return
            
        if data == "decline_show":
            await handle_show_decline(query, user_id, game, context)
            return
            
        if data == "noop":
            return

        action_result = None
        action_mapping = {
            'fold': (PlayerAction.FOLD, 0, "‚ùå –°–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã"),
            'call': (PlayerAction.CALL, 0, "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∞–ª —Å—Ç–∞–≤–∫—É"),
            'check': (PlayerAction.CHECK, 0, "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥"),
            'show': (PlayerAction.SHOW, 0, "üÉè –¢—Ä–µ–±—É–µ—Ç –≤—Å–∫—Ä—ã—Ç–∏—è!"),
            'look': (PlayerAction.LOOK, 0, "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Ä—Ç—ã"),
            'swara': (PlayerAction.SWARA, 0, "‚öîÔ∏è –ù–∞—á–∏–Ω–∞–µ—Ç —Å–≤–∞—Ä—É!")
        }
        
        if data.startswith('raise_'):
            amount = int(data.split('_')[1])
            action_result = await game.player_action(user_id, PlayerAction.RAISE, amount, context)
        elif data in action_mapping:
            action, amount, default_msg = action_mapping[data]
            action_result = await game.player_action(user_id, action, amount, context)
            if action_result[0] and action == PlayerAction.SWARA:
                action_result = (action_result[0], default_msg)
        
        if action_result:
            success, message = action_result
            if success:
                await context.bot.send_message(
                    chat_id=game.chat_id,
                    text=f"{game.players[user_id]['name']}: {message}"
                )
            else:
                await query.answer(message, show_alert=True)
            for pid in game.players:
                try:
                    await send_player_interface(context, pid, game)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫–∞ {pid}: {e}")
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

async def handle_swara_join(query, user_id, game, context):
    if game.state == GameState.FINAL_SWARA_WAIT and user_id not in game.swara_participants:
        player_balance = await game.get_user_balance(user_id)
        if player_balance >= game.swara_cost:
            if await game.update_user_balance(user_id, -game.swara_cost, "join_swara"):
                game.swara_participants.add(user_id)
                await context.bot.send_message(
                    chat_id=game.chat_id,
                    text=f"‚öîÔ∏è {game.players[user_id]['name']} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–∞—Ä–µ –∑–∞ {game.swara_cost} {EMOJI['money']}!"
                )
                await send_player_interface(context, user_id, game)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        else:
            await query.answer(
                f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: {game.swara_cost} {EMOJI['money']}", 
                show_alert=True
            )

async def handle_show_confirmation(query, user_id, game, context):
    if game.state == GameState.AWAITING_CONFIRMATION and user_id not in game.show_confirmations:
        game.show_confirmations.add(user_id)
        await context.bot.send_message(
            chat_id=game.chat_id,
            text=f"üîÑ {game.players[user_id]['name']} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—Å–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç."
        )
        
        active_players = [pid for pid, p in game.players.items() if not p['folded']]
        if set(active_players) == game.show_confirmations:
            game.state = GameState.SHOWDOWN
            await context.bot.send_message(
                chat_id=game.chat_id,
                text="üéØ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Å–∫—Ä—ã—Ç–∏–µ! –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è..."
            )
            await game.determine_winner(context)

async def handle_show_decline(query, user_id, game, context):
    game.state = GameState.BIDDING
    game.show_confirmations.clear()
    await context.bot.send_message(
        chat_id=game.chat_id,
        text=f"üîÑ {game.players[user_id]['name']} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—Å–∫—Ä—ã—Ç–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ—Ä–≥–∏."
    )
    for pid in game.players:
        try:
            await send_player_interface(context, pid, game)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫–∞ {pid}: {e}")

async def start_game_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    bet_amount = context.job.data['bet_amount']
    
    if chat_id not in active_games:
        return
        
    game = active_games[chat_id]
    
    if len(game.players) < 2:
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ (–º–∏–Ω–∏–º—É–º 2). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        for player_id in game.players:
            await game.update_user_balance(player_id, game.bet_amount, "game_cancel")
        del active_games[chat_id]
        return
        
    if await game.start_game():
        mode_info = {
            GameMode.NORMAL: "–æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ",
            GameMode.FAST: "–±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ",
            GameMode.TOURNAMENT: "—Ç—É—Ä–Ω–∏—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ"
        }.get(game.game_mode, "–æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        players_list = "\n".join(
            f"‚Ä¢ {p['name']}"
            for p in game.players.values()
        )
        
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! ({mode_info})\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: {bet_amount} {EMOJI['money']}\n"
                f"üè¶ –ë–∞–Ω–∫: {game.pot} {EMOJI['money']}\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(game.players)}):\n{players_list}\n\n"
                f"üîÑ –ü–µ—Ä–≤—ã–π —Ö–æ–¥: {game.players[game.current_player]['name']}"
            )
        )
        
        keyboard = [[InlineKeyboardButton("üéÆ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ", url=f"https://t.me/{context.bot.username}")]]
        await message.edit_reply_markup(InlineKeyboardMarkup(keyboard))
        
        for player_id in game.players:
            try:
                await send_player_interface(context, player_id, game)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    else:
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        del active_games[chat_id]

async def start_fast_game_callback(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    bet_amount = context.job.data['bet_amount']
    
    if chat_id not in active_games:
        return
        
    game = active_games[chat_id]
    
    if len(game.players) < 2:
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ (–º–∏–Ω–∏–º—É–º 2). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        for player_id in game.players:
            await game.update_user_balance(player_id, game.bet_amount, "game_cancel")
        del active_games[chat_id]
        return
        
    if await game.start_game():
        players_list = "\n".join(
            f"‚Ä¢ {p['name']}"
            for p in game.players.values()
        )
        
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n"
                f"üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {bet_amount} {EMOJI['money']}\n"
                f"üè¶ –ë–∞–Ω–∫: {game.pot} {EMOJI['money']}\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(game.players)}):\n{players_list}\n\n"
                f"üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è..."
            )
        )
        
        # Immediately go to showdown and determine winner
        if game.state == GameState.SHOWDOWN:
            await game.determine_winner(context)
    else:
        await context.bot.send_message(
            chat_id=chat_id, 
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        del active_games[chat_id]

async def private_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.type != "private":
        return
        
    user_id = update.effective_user.id
    await db_connection.execute(
        'INSERT OR IGNORE INTO user_balances (user_id, balance) VALUES (?, ?)', (user_id, DEFAULT_BALANCE)
    )
    await db_connection.commit()
    
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['profile']} –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(f"{EMOJI['balance']} –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(f"{EMOJI['deposit']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton(f"{EMOJI['withdraw']} –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data="add_to_chat")],
        [InlineKeyboardButton(f"{EMOJI['top']} –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton(f"{EMOJI['info']} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    
    if data == "profile":
        await show_profile(query, user_id, context)
    elif data == "balance":
        await show_balance_menu(query, user_id, context)
    elif data == "deposit":
        await handle_deposit(update, context)
    elif data == "withdraw":
        await handle_withdraw(update, context)
    elif data == "add_to_chat":
        await show_add_to_chat_instructions(query)
    elif data == "top_players":
        await show_top_players(query, context)
    elif data == "info":
        await show_info(query)
    elif data == "back_to_menu":
        await show_main_menu_from_query(query)
    elif data == "admin_menu":
        await show_admin_menu(query, context)

async def show_profile(query, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        async with db_connection.execute('SELECT COUNT(*) FROM game_history WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        games_played = row[0] if row else 0
        
        async with db_connection.execute('SELECT COUNT(*) FROM game_history WHERE user_id = ? AND result = "win"', (user_id,)) as cursor:
            row = await cursor.fetchone()
        games_won = row[0] if row else 0
        
        async with db_connection.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND amount > 0', (user_id,)) as cursor:
            row = await cursor.fetchone()
        total_profit = row[0] if row and row[0] is not None else 0
        
        await query.edit_message_text(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî ID: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} {EMOJI['money']}\n"
            f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games_played}\n"
            f"üèÜ –ü–æ–±–µ–¥: {games_won}\n"
            f"üíµ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_profit} {EMOJI['money']}\n\n",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

async def show_balance_menu(query, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        await query.edit_message_text(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {EMOJI['money']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{EMOJI['deposit']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
                 InlineKeyboardButton(f"{EMOJI['withdraw']} –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
                [InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

async def show_add_to_chat_instructions(query) -> None:
    await query.edit_message_text(
        "üìå –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç:\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Ç\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –≤–≤–µ—Ä—Ö—É\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'\n"
        "4. –ù–∞–π–¥–∏—Ç–µ @SekaPlaybot –∏ –¥–æ–±–∞–≤—å—Ç–µ\n\n"
        "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ —á–∞—Ç–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    )

async def show_top_players(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        async with db_connection.execute('SELECT user_id, balance FROM user_balances ORDER BY balance DESC LIMIT 10') as cursor:
            top_players = await cursor.fetchall()
            
        if not top_players:
            await query.edit_message_text(
                "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
            return
            
        text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
        for i, player in enumerate(top_players, 1):
            uid, balance = player
            try:
                user = await context.bot.get_chat(uid)
                name = user.full_name
            except:
                name = f"–ò–≥—Ä–æ–∫ {uid}"
                
            async with db_connection.execute('SELECT COUNT(*) FROM game_history WHERE user_id = ?', (uid,)) as cursor:
                row = await cursor.fetchone()
            games_played = row[0] if row else 0
            text += f"{i}. {name} - {balance} {EMOJI['money']} (–∏–≥—Ä: {games_played})\n"
            
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

async def show_info(query) -> None:
    await query.edit_message_text(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
        "üé¥ <b>Seka</b> - –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ–∫–µ—Ä–∞ –∏ –±–ª–µ—Ñ–∞.\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</b>\n"
        "- –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 3 –∫–∞—Ä—Ç—ã\n"
        "- –î–∂–æ–∫–µ—Ä - —Ç—Ä–µ—Ñ–æ–≤–∞—è —Å–µ–º–µ—Ä–∫–∞ (JOK), —É—Å–∏–ª–∏–≤–∞–µ—Ç –ª—é–±—É—é –º–∞—Å—Ç—å\n"
        "- –¢—Ä–∏ —à–µ—Å—Ç–µ—Ä–∫–∏ - –æ—Å–æ–±–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (34 –æ—á–∫–∞)\n"
        "- –î–≤–∞ —Ç—É–∑–∞ –¥–∞—é—Ç 22 –æ—á–∫–∞\n\n"
        "üí∞ <b>–ò–≥—Ä–∞ –Ω–∞ –¥–µ–Ω—å–≥–∏:</b>\n"
        "- –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å\n"
        "- –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É\n"
        "- –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–∞–≤–∫–∏\n"
        "- –í—ã–∏–≥—Ä—ã—à –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞ –≤—ã—á–µ—Ç–æ–º 20% –∫–æ–º–∏—Å—Å–∏–∏ –¥–∏–ª–µ—Ä–∞\n\n"
        "üîÑ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
        "2. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "3. –°–æ–∑–¥–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç /begin –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É\n"
        "4. –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: /fast\n\n",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    )

async def show_main_menu_from_query(query):
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['profile']} –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(f"{EMOJI['balance']} –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(f"{EMOJI['deposit']} –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
         InlineKeyboardButton(f"{EMOJI['withdraw']} –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data="add_to_chat")],
        [InlineKeyboardButton(f"{EMOJI['top']} –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton(f"{EMOJI['info']} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")]
    ]
    await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("500 ‚ÇΩ", callback_data="deposit_500"),
         InlineKeyboardButton("1000 ‚ÇΩ", callback_data="deposit_1000")],
        [InlineKeyboardButton("3000 ‚ÇΩ", callback_data="deposit_3000"),
         InlineKeyboardButton("5000 ‚ÇΩ", callback_data="deposit_5000")],
        [InlineKeyboardButton("10000 ‚ÇΩ", callback_data="deposit_10000"),
         InlineKeyboardButton("20000 ‚ÇΩ", callback_data="deposit_20000")],
        [InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    await query.edit_message_text(
        "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
    except Exception as e:
        logger.error(f"Error getting balance for withdraw: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]))
        return
        
    if balance < MIN_WITHDRAW:
        await query.edit_message_text(
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW} ‚ÇΩ\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
        return
        
    await query.edit_message_text(
        f"üì§ –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —É–∫–∞–∂–∏—Ç–µ:\n\n"
        f"1. –°—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–µ –º–µ–Ω–µ–µ {MIN_WITHDRAW} ‚ÇΩ)\n"
        f"2. –í–∞—à –∫—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫ (USDT TRC20)\n\n"
        f"–ü—Ä–∏–º–µ—Ä:\n<code>7500 ‚ÇΩ: TAbCdEfGhIjKlMnOpQrStUvWxYz123456</code>\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
    )
    context.user_data['awaiting_withdrawal'] = True

async def process_deposit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    amount_rub = int(query.data.split('_')[1])
    rate = await get_exchange_rate("RUB", "USDT")
    usdt_amount = round(amount_rub * rate, 4)
    invoice_url = await create_crypto_bot_invoice(user_id, usdt_amount)
    
    if invoice_url:
        await query.edit_message_text(
            f"üì• –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount_rub} ‚ÇΩ (~ {usdt_amount} USDT):\n\n"
            f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {invoice_url}\n"
            f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ USDT\n"
            f"3. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É Binance\n\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 ‚ÇΩ ‚âà {rate:.6f} USDT\n"
            f"–û–±—ã—á–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç 1-5 –º–∏–Ω—É—Ç.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
    else:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )

async def handle_withdrawal_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get('awaiting_withdrawal', False):
        return
        
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    user_name = update.effective_user.full_name
    
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤—ã–≤–æ–¥
        parts = text.split(':')
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
        amount_part = parts[0].strip()
        amount_str = re.sub(r'[^\d.]', '', amount_part)
        if not amount_str:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
            
        amount_rub = float(amount_str)
        wallet = parts[1].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        if balance < amount_rub:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
            return
            
        if amount_rub < MIN_WITHDRAW:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW} ‚ÇΩ",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        await db_connection.execute(
            'UPDATE user_balances SET balance = balance - ? WHERE user_id = ?',
            (amount_rub, user_id)
        )
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–ø–∏—Å–∞–Ω–∏—è
        await db_connection.execute(
            'INSERT INTO transactions (user_id, amount, transaction_type, details) VALUES (?, ?, ?, ?)',
            (user_id, -amount_rub, "withdrawal_request", f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount_rub}‚ÇΩ, –∫–æ—à–µ–ª–µ–∫: {wallet}")
        )
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db_connection.execute(
            'INSERT INTO withdrawal_requests (user_id, user_name, amount, wallet, status) VALUES (?, ?, ?, ?, ?)',
            (user_id, user_name, amount_rub, wallet, 'pending')
        )
        await db_connection.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async with db_connection.execute('SELECT last_insert_rowid()') as cursor:
            request_id = (await cursor.fetchone())[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_withdraw_{request_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{request_id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üì§ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
                         f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
                         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})\n"
                         f"üí∞ –°—É–º–º–∞: {amount_rub} ‚ÇΩ\n"
                         f"üè¶ –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
                         f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {balance - amount_rub} ‚ÇΩ",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount_rub} ‚ÇΩ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n\n"
            f"–°—É–º–º–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            f"–û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n"
            f"ID –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {request_id}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
    except Exception as e:
        logger.error(f"Error processing withdrawal: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏–º–µ—Ä:\n\n"
            "<code>7500 ‚ÇΩ: TAbCdEfGhIjKlMnOpQrStUvWxYz123456</code>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        )
    finally:
        context.user_data['awaiting_withdrawal'] = False

async def handle_withdrawal_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
        
    data = query.data
    action, request_id = data.split('_')[1], int(data.split('_')[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        async with db_connection.execute(
            'SELECT user_id, user_name, amount, wallet FROM withdrawal_requests WHERE id = ? AND status = "pending"',
            (request_id,)
        ) as cursor:
            request = await cursor.fetchone()
            
        if not request:
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return
            
        target_user_id, user_name, amount_rub, wallet = request
        
        if action == 'approve':
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USDT
            rate = await get_exchange_rate("RUB", "USDT")
            usdt_amount = round(amount_rub * rate, 4)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Bot
            success = await process_crypto_bot_withdrawal(target_user_id, usdt_amount, wallet)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
                await db_connection.execute(
                    'UPDATE withdrawal_requests SET status = "approved", processed_by = ?, processed_at = CURRENT_TIMESTAMP WHERE id = ?',
                    (user_id, request_id)
                )
                await db_connection.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –±—ã–ª <b>–æ–¥–æ–±—Ä–µ–Ω</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                             f"üí∞ –°—É–º–º–∞: {amount_rub} ‚ÇΩ (~{usdt_amount} USDT)\n"
                             f"üè¶ –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
                             f"–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç 15-30 –º–∏–Ω—É—Ç.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

                await query.edit_message_text(
                    f"‚úÖ –í—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω:\n\n"
                    f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {target_user_id})\n"
                    f"üí∞ –°—É–º–º–∞: {amount_rub} ‚ÇΩ (~{usdt_amount} USDT)\n"
                    f"üè¶ –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
                    f"–°—Ç–∞—Ç—É—Å: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ Crypto Bot.\n\n"
                    f"–ó–∞–ø—Ä–æ—Å #{request_id} –æ—Å—Ç–∞–ª—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è."
                )

        elif action == 'reject':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            await db_connection.execute(
                'UPDATE withdrawal_requests SET status = "rejected", processed_by = ?, processed_at = CURRENT_TIMESTAMP WHERE id = ?',
                (user_id, request_id)
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await db_connection.execute(
                'UPDATE user_balances SET balance = balance + ? WHERE user_id = ?',
                (amount_rub, target_user_id)
            )
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await db_connection.execute(
                'INSERT INTO transactions (user_id, amount, transaction_type, details) VALUES (?, ?, ?, ?)',
                (target_user_id, amount_rub, "withdrawal_reject", f"–í–æ–∑–≤—Ä–∞—Ç –ø–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ #{request_id}")
            )
            await db_connection.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{request_id} –±—ã–ª <b>–æ—Ç–∫–ª–æ–Ω—ë–Ω</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                         f"üí∞ –°—É–º–º–∞: {amount_rub} ‚ÇΩ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                         f"üè¶ –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
                         f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

            await query.edit_message_text(
                f"‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω:\n\n"
                f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {target_user_id})\n"
                f"üí∞ –°—É–º–º–∞: {amount_rub} ‚ÇΩ\n"
                f"üè¶ –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
                f"–°—Ç–∞—Ç—É—Å: –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        f"{EMOJI['help']} <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        f"/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        f"/begin - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏\n"
        f"/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n"
        f"/fast - –ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –∏–≥—Ä—É (–º–µ–Ω—å—à–∏–µ —Å—Ç–∞–≤–∫–∏)\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"üéÆ <b>–î–µ–π—Å—Ç–≤–∏—è –≤ –∏–≥—Ä–µ:</b>\n"
        f"- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å (Call) - —É—Ä–∞–≤–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É\n"
        f"- üîº –ü–æ–≤—ã—Å–∏—Ç—å (Raise) - —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É\n"
        f"- ‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (Check) - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥\n"
        f"- ‚ùå –°–±—Ä–æ—Å–∏—Ç—å (Fold) - –≤—ã–π—Ç–∏ –∏–∑ —Ä–∞–∑–¥–∞—á–∏\n"
        f"- üÉè –í—Å–∫—Ä—ã—Ç—å—Å—è (Show) - –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤—Å–∫—Ä—ã—Ç–∏–µ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)\n"
        f"- ‚öîÔ∏è –°–≤–∞—Ä–∞ - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥\n\n"
    )
    await update.message.reply_text(help_text, parse_mode="HTML")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if update.effective_chat.type == "private":
        await private_start(update, context)
        return
        
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        if balance <= 0:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    if chat_id in active_games:
        game = active_games[chat_id]
        if game.state in (GameState.WAITING, GameState.JOINING):
            await update.message.reply_text(
                f"‚è≥ –ò–≥—Ä–∞ –æ–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞. –°—Ç–∞–≤–∫–∞: {game.bet_amount} {EMOJI['money']}\n–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /join"
            )
        else:
            await update.message.reply_text("‚è≥ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.")
        return
        
    await update.message.reply_text(
        "üéÆ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>/begin —Å—É–º–º–∞</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/begin 100</code>\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
        parse_mode="HTML"
    )

async def begin_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if chat_id in active_games:
        await update.message.reply_text("‚è≥ –ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π.")
        return
        
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏. –ü—Ä–∏–º–µ—Ä:\n<code>/begin 100</code>", parse_mode="HTML")
        return
        
    bet_amount = int(context.args[0])
    
    if bet_amount < MIN_BET:
        await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} {EMOJI['money']}")
        return
        
    if bet_amount > MAX_BET:
        await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} {EMOJI['money']}")
        return
        
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        if balance < bet_amount:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {EMOJI['money']}\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {bet_amount} {EMOJI['money']}"
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    active_games[chat_id] = SekaGame(chat_id, user_id, bet_amount)
    game = active_games[chat_id]
    
    if await game.add_player(user_id, update.effective_user.full_name):
        timeout = 30
        
        await update.message.reply_text(
            f"üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –°—Ç–∞–≤–∫–∞: {bet_amount} {EMOJI['money']}\n\n"
            f"–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /join\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –Ω–µ –º–µ–Ω–µ–µ —Å—Ç–∞–≤–∫–∏\n\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {update.effective_user.full_name}\n"
            f"–ò–≥—Ä–æ–∫–æ–≤: 1\n\n"
            f"–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç 2+ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ {timeout} —Å–µ–∫—É–Ω–¥."
        )
        
        game.timeout_job = context.job_queue.run_once(
            start_game_callback,
            timeout,
            chat_id=chat_id,
            name=f"start_game_{chat_id}",
            data={'bet_amount': bet_amount}
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

async def start_fast_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if chat_id in active_games:
        await update.message.reply_text("‚è≥ –ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
    if context.args and context.args[0].isdigit():
        bet_amount = int(context.args[0])
    else:
        bet_amount = FAST_MODE_BET  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–≤–∫—É
    if bet_amount < MIN_BET:
        await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} {EMOJI['money']}")
        return
        
    if bet_amount > MAX_BET:
        await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MAX_BET} {EMOJI['money']}")
        return
    
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        if balance < bet_amount:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {EMOJI['money']}\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {bet_amount} {EMOJI['money']}"
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    active_games[chat_id] = SekaGame(chat_id, user_id, bet_amount, GameMode.FAST)
    game = active_games[chat_id]
    
    if await game.add_player(user_id, update.effective_user.full_name):
        timeout = 30
        
        await update.message.reply_text(
            f"‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –°—Ç–∞–≤–∫–∞: {bet_amount} {EMOJI['money']}\n\n"
            f"–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /join\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –Ω–µ –º–µ–Ω–µ–µ {bet_amount} {EMOJI['money']}\n\n"
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {update.effective_user.full_name}\n"
            f"–ò–≥—Ä–æ–∫–æ–≤: 1\n\n"
            f"–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç 2-6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —á–µ—Ä–µ–∑ {timeout} —Å–µ–∫—É–Ω–¥."
        )
        
        game.timeout_job = context.job_queue.run_once(
            start_fast_game_callback,
            timeout,
            chat_id=chat_id,
            name=f"start_fast_game_{chat_id}",
            data={'bet_amount': bet_amount}
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

async def join_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if chat_id not in active_games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /begin")
        return
        
    game = active_games[chat_id]
    
    if game.state not in (GameState.WAITING, GameState.JOINING):
        await update.message.reply_text("‚è≥ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
        return
        
    if user_id in game.players:
        await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
        return
        
    try:
        async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
        balance = row[0] if row else 0
        
        if balance < game.bet_amount:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è: {game.bet_amount} {EMOJI['money']}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} {EMOJI['money']}"
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    if await game.add_player(user_id, update.effective_user.full_name):
        if game.timeout_job:
            game.timeout_job.schedule_removal()
            timeout = 30
            game.timeout_job = context.job_queue.run_once(
                start_game_callback if game.game_mode == GameMode.NORMAL else start_fast_game_callback,
                timeout,
                chat_id=chat_id,
                name=f"start_{'fast_' if game.game_mode == GameMode.FAST else ''}game_{chat_id}",
                data={'bet_amount': game.bet_amount}
            )
        
        await update.message.reply_text(
            f"üéâ {update.effective_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! {EMOJI['money']}\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {game.bet_amount} {EMOJI['money']}\n\n"
            f"–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç {'2-6' if game.game_mode == GameMode.FAST else '2+'} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —á–µ—Ä–µ–∑ {timeout} —Å–µ–∫—É–Ω–¥."
        )
        
        if len(game.players) >= 2 and game.state == GameState.WAITING:
            game.state = GameState.JOINING
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ. –ú–∞–∫—Å–∏–º—É–º 6 –∏–≥—Ä–æ–∫–æ–≤.")

async def cancel_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if chat_id not in active_games:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
        
    game = active_games[chat_id]
    
    if user_id != game.creator_id and user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.")
        return
        
    for player_id in game.players:
        if not game.players[player_id]['folded']:
            await game.update_user_balance(player_id, game.bet_amount, "game_cancel")
    
    await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    del active_games[chat_id]

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]")
        return
        
    command = context.args[0].lower()
    
    if command == "balance":
        if len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin balance <user_id> [amount]")
            return
            
        try:
            target_id = int(context.args[1])
            if len(context.args) > 2:
                amount = int(context.args[2])
                await db_connection.execute(
                    'INSERT OR REPLACE INTO user_balances (user_id, balance) VALUES (?, ?)',
                    (target_id, amount)
                )
                await db_connection.commit()
                await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {amount}.")
            else:
                async with db_connection.execute('SELECT balance FROM user_balances WHERE user_id = ?', (target_id,)) as cursor:
                    row = await cursor.fetchone()
                balance = row[0] if row else 0
                await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}: {balance}.")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ —Å—É–º–º—ã.")
    
    elif command == "games":
        await update.message.reply_text(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(active_games)}")
    
    elif command == "cancel":
        if len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin cancel <chat_id>")
            return
            
        try:
            chat_id = int(context.args[1])
            if chat_id in active_games:
                game = active_games[chat_id]
                for player_id in game.players:
                    if not game.players[player_id]['folded']:
                        await game.update_user_balance(player_id, game.bet_amount, "game_admin_cancel")
                del active_games[chat_id]
                await update.message.reply_text(f"–ò–≥—Ä–∞ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            else:
                await update.message.reply_text(f"–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id.")
    elif command == "stats":
        await show_admin_stats(query, context)

async def show_admin_stats(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        async with db_connection.execute('SELECT COUNT(*) FROM user_balances') as cursor:
            total_users = (await cursor.fetchone())[0]
        async with db_connection.execute('SELECT COUNT(*) FROM game_history') as cursor:
            total_games = (await cursor.fetchone())[0]
        async with db_connection.execute('SELECT SUM(amount) FROM transactions WHERE amount > 0') as cursor:
            total_deposits = (await cursor.fetchone())[0] or 0
        async with db_connection.execute('SELECT SUM(amount) FROM transactions WHERE amount < 0') as cursor:
            total_withdrawals = abs((await cursor.fetchone())[0] or 0)

        await query.edit_message_text(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {total_deposits} ‚ÇΩ\n"
            f"üì§ –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals} ‚ÇΩ",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['home']} –ù–∞–∑–∞–¥", callback_data="admin_menu")]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def on_startup(app: Application) -> None:
    global db_connection
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    try:
        db_connection = await aiosqlite.connect(DATABASE_PATH)
        await db_connection.execute('''
            CREATE TABLE IF NOT EXISTS user_balances (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 0
            )
        ''')
        await db_connection.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount INTEGER,
                transaction_type TEXT,
                game_id INTEGER,
                details TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db_connection.execute('''
            CREATE TABLE IF NOT EXISTS game_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                game_id INTEGER,
                bet_amount INTEGER,
                result TEXT,
                profit INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db_connection.execute('''
            CREATE TABLE IF NOT EXISTS withdrawal_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                user_name TEXT,
                amount INTEGER,
                wallet TEXT,
                status TEXT DEFAULT 'pending',
                processed_by INTEGER,
                processed_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db_connection.commit()
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")

async def on_shutdown(app: Application) -> None:
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    if db_connection:
        await db_connection.close()

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("begin", begin_game))
    application.add_handler(CommandHandler("join", join_game))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("fast", start_fast_game))
    application.add_handler(CommandHandler("cancel", cancel_game))
    application.add_handler(CommandHandler("admin", admin_command))
    
    application.add_handler(CallbackQueryHandler(handle_deposit, pattern=r"^deposit$"))
    application.add_handler(CallbackQueryHandler(process_deposit, pattern=r"^deposit_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_withdraw, pattern=r"^withdraw$"))
    application.add_handler(CallbackQueryHandler(handle_withdrawal_approval, pattern=r"^(approve|reject)_withdraw_\d+$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_withdrawal_message))
    
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern=r"^(profile|balance|add_to_chat|top_players|info|back_to_menu|admin_menu)$"))
    application.add_handler(CallbackQueryHandler(handle_action, pattern=r"^(fold|call|check|show|look|swara|raise_\d+|confirm_show|decline_show|noop|join_swara|final_swara|final_split|final_continue)$"))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, private_start))
    application.add_handler(MessageHandler(filters.ALL, lambda u, c: None))
    
    application.post_init = on_startup
    application.post_stop = on_shutdown
    
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":

    main()